#!/usr/bin/env python3

import json

import argparse

try: import setGPU
except ImportError: pass
import numpy as np

import torch

import torch.nn as nn
import torch.optim as optim

import torch.nn.functional as F
from torch.autograd import Function, Variable

import torchvision.datasets as dset
import torchvision.transforms as transforms
from torchvision.utils import save_image

from torch.utils.data import DataLoader
from tensorboardX import SummaryWriter

import os
import sys
import math
import copy
import shutil

import setproctitle

import densenet
import models
import yaml
# import make_graph

import sys
from IPython.core import ultratb

from update import LocalUpdate, test_inference

class DistManager(object):
    def __init__(self) -> None:
        pass
    
    def run_exp(self) -> None:
        # record the experiment result to the directory
        # make the global_model to the clients and complete the initial method
        # split dataset to different clients.
        # for number of epochs
            # every client complete local update and test the model            
            # every client upload information to the global             
            # global complete calculation and test the global model            
            # every client receive information from global and update model            
            # record the test information
        pass
    
class FedDistManager(DistManager):
    def __init__(self) -> None:
        super().__init__()
        
    def run_exp(self) -> None:
        return super().run_exp()
    
    def set_model(self, model):
        self.model = model
        
    def set_dataset(self, dataset):
        self.dataset = dataset
        
    def set_local_train(self, train_method):
        self.train = train_method
        
class DecenDistManager(DistManager):
    def __init__(self) -> None:
        super().__init__()
    
    def run_exp(self) -> None:
        return super().run_exp()
    
    def set_model(self, model):
        self.model = model
        
    def set_dataset(self, dataset):
        self.dataset = dataset
        
    def set_local_train(self, train_method):
        self.train = train_method
    